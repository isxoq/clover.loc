<?phpnamespace soft\db;use soft\helpers\ArrayHelper;use yii\helpers\StringHelper;/** * Migration to create tables and foreign keys. * This migration supports multilingual attributes. * Primary key ('id'), author ('user_id') and timestamp attributes will be automatically generated * * @property-read bool $isMultilingual */class Migration extends \yii\db\Migration{    private $_langTableName;    public $primaryKey = 'id';    public $tableOptions;    /**     * @var string $tableName - Jadval nomi     * NOTE! jadval nomini yozishda table prefixdan foydalanmang, shunchaki jadval nomini yozing.     * masalan 'product'.     * Agar $this->useTablePrefix qiymati true ga teng bo'lsa, prefix avtomatik generatsiya qilinadi     *    masalan - {{%product}}     */    public $tableName;    public $authorId = false;    public $status = true;    public $timestamp = false;    public $multilingiualAttributes = [];    public $useTablePrefix = true;    /**     * @var array $foreignKeys - Foreign Keys     * usage: $this->foreignKeys = [     *    [     *        'name' => 'name', // if not set, it will be automatically generated     *        'table' => 'tableName' // defaults to $this->tableName     *        'columns' => 'category_id',     *        'refTable' => 'product_category',     *        'refColumns' => 'id' // defaults to 'id'     *        'delete' => 'CASCADE',    // defaults to 'CASCADE'     *        'update' => 'CASCADE',    // defaults to 'CASCADE'     *    ],     *    [...],     *    [...],     * ];     *     * @see [[Migation::addForeignKey() ]]     */    public $foreignKeys = [];    public function init()    {        $this->generateTableName();        if ($this->isMultilingual) {            $this->setLangTablename();        }        if ($this->db->driverName === 'mysql') {            $this->tableOptions = 'CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE=InnoDB';        }    }    public function attributes()    {        return [];    }    public function generateAttributes()    {        $result = [];        if ($this->primaryKey === 'id') {            $result['id'] = $this->primaryKey();        }        $result = array_merge($result, $this->attributes());        if ($this->status){            $result = array_merge($result, ['status' => $this->boolean()->defaultValue(0)]);        }        if ($this->authorId !== false) {            $result = array_merge($result, [$this->authorId => $this->integer()]);            $this->foreignKeys[] = [                'columns' => $this->authorId,                'refTable' => 'user',                'delete' => 'RESTRICT',                'update' => 'RESTRICT',            ];        }        if ($this->timestamp) {            $result = array_merge($result, ['created_at' => $this->integer()]);            $result = array_merge($result, ['updated_at' => $this->integer()]);        }        /*if ($this->statusField !== false) {            $result = array_merge($result, [$this->statusField => $this->boolean()]);        }*/        if ($this->isMultilingual) {            foreach ($this->multilingiualAttributes as $attribute) {                unset($result[$attribute]);            }        }        return $result;    }    public function generateTableName()    {        if ($this->useTablePrefix) {            $this->tableName = "{{%" . $this->tableName . "}}";        }    }    public function createForeignKeys()    {        foreach ($this->foreignKeys as $key) {            $table = ArrayHelper::getValue($key, 'table', $this->tableName);            $columns = ArrayHelper::getValue($key, 'columns');            $refTable = ArrayHelper::getValue($key, 'refTable');            $refColumns = ArrayHelper::getValue($key, 'refColumns', 'id');            $delete = ArrayHelper::getValue($key, 'delete', 'CASCADE');            $update = ArrayHelper::getValue($key, 'update', 'CASCADE');            $name = ArrayHelper::getValue($key, 'name');            if ($name == null) {                $name = $this->generateForeignKeyConstraintName($table, $refTable, $columns);            }            $this->addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete, $update);        }    }    public function generateForeignKeyConstraintName($table, $refTable, $columns)    {        $column = is_array($columns) ? $columns[0] : $columns;        return "fk_" . $this->baseTableName($table) . "_" . $column . "_" . $this->baseTableName($refTable);    }    /**     * Get original table name without table prefix     * Example: if $tableName == '{{%product}}', result will be 'product'     * @return  string original table name     * @var string $tableName table name     */    public function baseTableName($tableName)    {        if (StringHelper::endsWith($tableName, '}}')) {            return StringHelper::byteSubstr($tableName, 3, strlen($tableName) - 5);        }        return $tableName;    }    public function safeUp()    {        $tableOptions = null;        $attributes = $this->generateAttributes();        if ($this->isMultilingual) {            $this->createLangTable();        }        $this->createTable($this->tableName, $attributes, $this->tableOptions);        $this->createForeignKeys();    }    public function safeDown()    {        if ($this->isMultilingual) {            $this->dropTable($this->_langTableName);        }        foreach ($this->foreignKeys as $key) {            $table = ArrayHelper::getValue($key, 'table', $this->tableName);            $columns = ArrayHelper::getValue($key, 'columns');            $refTable = ArrayHelper::getValue($key, 'refTable');            $name = ArrayHelper::getValue($key, 'name');            if ($name == null) {                $name = $this->generateForeignKeyConstraintName($table, $refTable, $columns);            }            $this->dropForeignKey($name, $table);        }        $this->dropTable($this->tableName);    }    public function getIsMultilingual()    {        return !empty($this->multilingiualAttributes);    }    /**     * If the table is Multilingual, create additional table for language     */    public function createLangTable()    {        // multilingual table attributes (columns)        $attributes = [            'id' => $this->primaryKey(),            'owner_id' => $this->integer()->notNull(),            'language' => $this->string(6)->notNull(),        ];        foreach ($this->multilingiualAttributes as $attribute) {            $attributes[$attribute] = ArrayHelper::getValue($this->attributes(), $attribute);        }        $this->createTable($this->_langTableName, $attributes, $this->tableOptions);        $this->foreignKeys[] = [            'name' => 'fk_owner_id_to_'.$this->baseTableName($this->tableName).'_table',            'table' => $this->_langTableName,            'columns' => 'owner_id',            'refTable' => $this->tableName,        ];    }    public function setLangTablename()    {        $table = $this->baseTableName($this->tableName);        $langTable = $table . "_lang";        if ($this->useTablePrefix) {            $langTable = "{{%" . $langTable . "}}";        }        $this->_langTableName = $langTable;    }}?>