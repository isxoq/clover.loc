<?phpnamespace backend\modules\translationmanager\controllers;use Yii;use backend\modules\translationmanager\models\Message;use soft\helpers\LatinCyrillConvertor;use soft\web\AjaxCrudController;use backend\modules\translationmanager\models\SourceMessage;use backend\modules\translationmanager\models\SourceMessageSearch;use yii\filters\AccessControl;use yii\web\NotFoundHttpException;use backend\modules\translationmanager\models\sync\Sync;/** * DefaultController implements the CRUD actions for SourceMessage model. */class DefaultController extends AjaxCrudController{    public function behaviors()    {        return [            'access' => [                'class' => AccessControl::className(),                'rules' => [                    [                        'allow' => true,//                        'roles' => ['admin'],                        'roles' => ['@'],                    ],                ],            ],        ];    }    /**     * Lists all SourceMessage models.     * @return mixed     */    public function actionIndex()    {        $searchModel = new SourceMessageSearch();        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);        return $this->render('index', [            'searchModel' => $searchModel,            'dataProvider' => $dataProvider,        ]);    }    /**     * Creates a new SourceMessage model.     * If creation is successful, the browser will be redirected to the 'view' page.     * @return mixed     * @throws \Exception     */    public function actionCreate()    {        $model = new SourceMessage([            'category' => 'app',        ]);        return $this->ajaxCrud->createAction($model, ['forceClose' => true, 'returnUrl' => ['index']]);    }    /**     * @param int $id     * @return array|mixed|string     * @throws NotFoundHttpException     */    public function actionUpdate($id)    {        $model = $this->findModel($id);        $page = $this->request->get('page', 1);        return $this->ajaxCrud->updateAction($model, ['forceClose' => true, 'returnUrl' => ['index', 'page' => $page ]]);    }    public function findModel($id)    {        if (($model = SourceMessage::findOne($id)) !== null) {            return $model;        } else {            throw new NotFoundHttpException('The requested page does not exist.');        }    }    public function actionConvert()    {        $models = SourceMessage::find()->all();        foreach ($models as $model){            $kr = Message::findOne(['id' => $model->id, 'language' => 'kr']);            if ($kr == null){                $kr = new Message(['id' => $model->id, 'language' => 'kr']);            }            if ($kr->translation == ''){                $uz = Message::findOne(['id' => $model->id, 'language' => 'uz']);                if ($uz != null){                    $kr->translation = LatinCyrillConvertor::latinToCyrill($uz->translation);                    $kr->save();                }            }        }    }    public function actionFillColumns()    {       /* $messages = Message::find()->all();        foreach ($messages as $message){            $message->created_at = time();            $message->save();        }        */      /*  $sourcemessages = SourceMessage::find()->all();        foreach ($sourcemessages as $sourcemessage){            $sourcemessage->created_at = time();            $sourcemessage->save();        }*/    }    public function actionSync()    {        $session = Yii::$app->session;        $db1 = Yii::$app->db;        $db2 = Yii::$app->db2;        if ( strpos( $db1->dsn, 'localhost') === false ){            $session->setFlash('error', "common/config/main-local faylda `db` componentga localhostdagi bazani ulang");            return $this->back();        }        if ( strpos( $db2->dsn, '62.209.143.143') === false ){            $session->setFlash('error', "common/config/main-local faylda `db2` componentga hostingdagi bazani ulang");            return $this->back();        }        $export = intval($this->request->get('export', 0));        $import = intval($this->request->get('import', 0));        if ($export > 0 && $import == 0){            Sync::export();            return $this->back();        }         if ($export == 0 && $import > 0){            Sync::import();            return $this->back();        }        if ($export > $import){            Sync::export();            Sync::import();        }        else{            Sync::import();            Sync::export();        }        return $this->back();    }}